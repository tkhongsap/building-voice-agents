# NGINX Configuration for Voice Agents Platform Load Balancing
# Optimized for WebRTC traffic and HTTP/HTTPS load balancing

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Optimize worker connections
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;
    
    # Upstream configuration for Voice Agent services
    upstream voice_agents {
        least_conn;
        
        # Main service
        server voice-agent:8080 weight=2 max_fails=3 fail_timeout=30s;
        
        # Worker instances
        server voice-agent-worker-1:8080 weight=1 max_fails=3 fail_timeout=30s;
        server voice-agent-worker-2:8080 weight=1 max_fails=3 fail_timeout=30s;
        
        # Health check
        keepalive 32;
    }
    
    # Upstream for LiveKit WebRTC
    upstream livekit_ws {
        server livekit:7880;
        keepalive 16;
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint (allow HTTP)
        location /health {
            proxy_pass http://voice_agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL configuration (self-signed for development)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' ws: wss: data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; connect-src 'self' ws: wss:;" always;
        
        # Client body size for file uploads
        client_max_body_size 10M;
        
        # WebSocket proxy for LiveKit
        location /ws {
            proxy_pass http://livekit_ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            
            # Rate limiting for WebSocket connections
            limit_req zone=websocket burst=10 nodelay;
        }
        
        # API endpoints with rate limiting
        location /api/ {
            proxy_pass http://voice_agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # Enable buffering for better performance
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://voice_agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No rate limiting for health checks
            access_log off;
        }
        
        # Metrics endpoint (protected)
        location /metrics {
            proxy_pass http://voice_agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Basic auth for metrics (in production, use proper auth)
            # auth_basic "Metrics";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            
            # Allow only specific IPs (monitoring systems)
            allow 172.20.0.0/16;  # Docker network
            allow 127.0.0.1;      # Localhost
            deny all;
        }
        
        # Static assets with caching
        location /static/ {
            proxy_pass http://voice_agents;
            proxy_set_header Host $host;
            proxy_cache_valid 200 1d;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
        
        # Default proxy for all other requests
        location / {
            proxy_pass http://voice_agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enable buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # Status server for monitoring
    server {
        listen 8081;
        server_name _;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;  # Docker network
            allow 127.0.0.1;
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream configuration for TCP/UDP load balancing
stream {
    # Upstream for LiveKit UDP traffic
    upstream livekit_udp {
        server livekit:7882;
    }
    
    # Upstream for LiveKit TCP traffic
    upstream livekit_tcp {
        server livekit:7881;
    }
    
    # UDP proxy for WebRTC media
    server {
        listen 7882 udp;
        proxy_pass livekit_udp;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;
    }
    
    # TCP proxy for WebRTC fallback
    server {
        listen 7881;
        proxy_pass livekit_tcp;
        proxy_timeout 30s;
        proxy_connect_timeout 5s;
    }
}