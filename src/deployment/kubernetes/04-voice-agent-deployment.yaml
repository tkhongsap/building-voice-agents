# Voice Agent Deployment for LiveKit Voice Agents Platform
# Main application deployment with comprehensive scaling and monitoring

---
# Voice Agent Deployment - Development
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voice-agent
  namespace: voice-agents-dev
  labels:
    app: voice-agents-platform
    component: voice-agent
    environment: development
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: voice-agents-platform
      component: voice-agent
      environment: development
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: voice-agent
        environment: development
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voice-agent-service-account
      imagePullSecrets:
        - name: docker-registry-secret
      containers:
        - name: voice-agent
          image: voice-agents-platform:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 9090
              name: metrics
              protocol: TCP
          env:
            # Configuration from ConfigMap
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: ENVIRONMENT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: LOG_LEVEL
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: SERVER_PORT
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: REDIS_PORT
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_PORT
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_USER
            - name: LIVEKIT_HOST
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: LIVEKIT_HOST
            - name: LIVEKIT_PORT
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: LIVEKIT_PORT
            - name: MAX_WORKERS
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: MAX_WORKERS
            - name: JAEGER_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: JAEGER_ENDPOINT
            
            # Secrets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: POSTGRES_PASSWORD
            - name: LIVEKIT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_KEY
            - name: LIVEKIT_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_SECRET
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: REDIS_PASSWORD
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: OPENAI_API_KEY
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: ANTHROPIC_API_KEY
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: JWT_SECRET
            
            # Pod information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          
          volumeMounts:
            - name: logs-volume
              mountPath: /app/logs
            - name: cache-volume
              mountPath: /app/cache
            - name: temp-storage
              mountPath: /app/temp
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
      
      volumes:
        - name: logs-volume
          persistentVolumeClaim:
            claimName: voice-agent-logs-pvc
        - name: cache-volume
          persistentVolumeClaim:
            claimName: voice-agent-cache-pvc
        - name: temp-storage
          emptyDir:
            sizeLimit: 1Gi
      
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      
      terminationGracePeriodSeconds: 60
      restartPolicy: Always
      dnsPolicy: ClusterFirst

---
# Voice Agent Deployment - Staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voice-agent
  namespace: voice-agents-staging
  labels:
    app: voice-agents-platform
    component: voice-agent
    environment: staging
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: voice-agents-platform
      component: voice-agent
      environment: staging
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: voice-agent
        environment: staging
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voice-agent-service-account
      imagePullSecrets:
        - name: docker-registry-secret
      containers:
        - name: voice-agent
          image: voice-agents-platform:staging
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 9090
              name: metrics
              protocol: TCP
          envFrom:
            - configMapRef:
                name: voice-agents-config
          env:
            # Secrets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: POSTGRES_PASSWORD
            - name: LIVEKIT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_KEY
            - name: LIVEKIT_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_SECRET
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: REDIS_PASSWORD
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: OPENAI_API_KEY
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: ANTHROPIC_API_KEY
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: JWT_SECRET
            
            # Pod information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          
          volumeMounts:
            - name: logs-volume
              mountPath: /app/logs
            - name: cache-volume
              mountPath: /app/cache
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
      
      volumes:
        - name: logs-volume
          persistentVolumeClaim:
            claimName: voice-agent-logs-pvc
        - name: cache-volume
          persistentVolumeClaim:
            claimName: voice-agent-cache-pvc
      
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      
      terminationGracePeriodSeconds: 60

---
# Voice Agent Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voice-agent
  namespace: voice-agents-prod
  labels:
    app: voice-agents-platform
    component: voice-agent
    environment: production
    version: v1.0.0
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: voice-agents-platform
      component: voice-agent
      environment: production
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: voice-agent
        environment: production
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voice-agent-service-account
      imagePullSecrets:
        - name: docker-registry-secret
      nodeSelector:
        node-type: compute-optimized
      tolerations:
        - key: "voice-agents"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: voice-agents-platform
                    component: voice-agent
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      containers:
        - name: voice-agent
          image: voice-agents-platform:production
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 9090
              name: metrics
              protocol: TCP
          envFrom:
            - configMapRef:
                name: voice-agents-config
          env:
            # Secrets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: POSTGRES_PASSWORD
            - name: LIVEKIT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_KEY
            - name: LIVEKIT_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_SECRET
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: REDIS_PASSWORD
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: OPENAI_API_KEY
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: ANTHROPIC_API_KEY
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: JWT_SECRET
            
            # Pod information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "8Gi"
              cpu: "4000m"
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          
          volumeMounts:
            - name: logs-volume
              mountPath: /app/logs
            - name: cache-volume
              mountPath: /app/cache
            - name: temp-processing
              mountPath: /app/temp
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
      
      volumes:
        - name: logs-volume
          persistentVolumeClaim:
            claimName: voice-agent-logs-pvc
        - name: cache-volume
          persistentVolumeClaim:
            claimName: voice-agent-cache-pvc
        - name: temp-processing
          persistentVolumeClaim:
            claimName: temp-processing-pvc
      
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      
      terminationGracePeriodSeconds: 120