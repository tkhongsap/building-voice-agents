# Supporting Services Deployments for LiveKit Voice Agents Platform
# Redis, PostgreSQL, LiveKit, and other infrastructure components

---
# PostgreSQL Deployment - Development
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: voice-agents-dev
  labels:
    app: voice-agents-platform
    component: postgres
    environment: development
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: voice-agents-platform
      component: postgres
      environment: development
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: postgres
        environment: development
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_INITDB_ARGS
              value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - agent
                - -d
                - voice_agents
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - agent
                - -d
                - voice_agents
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc

---
# PostgreSQL Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: voice-agents-prod
  labels:
    app: voice-agents-platform
    component: postgres
    environment: production
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: voice-agents-platform
      component: postgres
      environment: production
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: postgres
        environment: production
    spec:
      nodeSelector:
        node-type: database
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: voice-agents-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_INITDB_ARGS
              value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "8Gi"
              cpu: "4000m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - agent
                - -d
                - voice_agents
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - agent
                - -d
                - voice_agents
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            fsGroup: 999
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc

---
# Redis Deployment - Development
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: voice-agents-dev
  labels:
    app: voice-agents-platform
    component: redis
    environment: development
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: voice-agents-platform
      component: redis
      environment: development
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: redis
        environment: development
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: redis
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --maxmemory
            - "512mb"
            - --maxmemory-policy
            - "allkeys-lru"
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc

---
# Redis Deployment - Production (with Sentinel for HA)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: voice-agents-prod
  labels:
    app: voice-agents-platform
    component: redis
    environment: production
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: voice-agents-platform
      component: redis
      environment: production
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: redis
        environment: production
    spec:
      nodeSelector:
        node-type: memory-optimized
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: redis
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --maxmemory
            - "4gb"
            - --maxmemory-policy
            - "allkeys-lru"
            - --save
            - "900 1"
            - --save
            - "300 10"
            - --save
            - "60 10000"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          securityContext:
            runAsUser: 999
            runAsGroup: 999
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc

---
# LiveKit Server Deployment - Development
apiVersion: apps/v1
kind: Deployment
metadata:
  name: livekit
  namespace: voice-agents-dev
  labels:
    app: voice-agents-platform
    component: livekit
    environment: development
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: voice-agents-platform
      component: livekit
      environment: development
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: livekit
        environment: development
    spec:
      containers:
        - name: livekit
          image: livekit/livekit-server:latest
          ports:
            - containerPort: 7880
              name: http
            - containerPort: 7881
              name: rtc-tcp
            - containerPort: 7882
              name: rtc-udp
              protocol: UDP
          env:
            - name: LIVEKIT_CONFIG
              value: "/etc/livekit.yaml"
            - name: LIVEKIT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_KEY
            - name: LIVEKIT_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_SECRET
          volumeMounts:
            - name: livekit-config
              mountPath: /etc/livekit.yaml
              subPath: livekit.yaml
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /
              port: 7880
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 7880
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: livekit-config
          configMap:
            name: livekit-config

---
# LiveKit Server Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: livekit
  namespace: voice-agents-prod
  labels:
    app: voice-agents-platform
    component: livekit
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: voice-agents-platform
      component: livekit
      environment: production
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: livekit
        environment: production
    spec:
      nodeSelector:
        node-type: media-processing
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: voice-agents-platform
                    component: livekit
                topologyKey: kubernetes.io/hostname
      containers:
        - name: livekit
          image: livekit/livekit-server:latest
          ports:
            - containerPort: 7880
              name: http
            - containerPort: 7881
              name: rtc-tcp
            - containerPort: 7882
              name: rtc-udp
              protocol: UDP
          env:
            - name: LIVEKIT_CONFIG
              value: "/etc/livekit.yaml"
            - name: LIVEKIT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_KEY
            - name: LIVEKIT_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: voice-agents-secrets
                  key: LIVEKIT_API_SECRET
          volumeMounts:
            - name: livekit-config
              mountPath: /etc/livekit.yaml
              subPath: livekit.yaml
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "8Gi"
              cpu: "4000m"
          livenessProbe:
            httpGet:
              path: /
              port: 7880
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 7880
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
      volumes:
        - name: livekit-config
          configMap:
            name: livekit-config

---
# NGINX Load Balancer Deployment - Development
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: voice-agents-dev
  labels:
    app: voice-agents-platform
    component: nginx
    environment: development
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: voice-agents-platform
      component: nginx
      environment: development
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: nginx
        environment: development
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config

---
# NGINX Load Balancer Deployment - Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: voice-agents-prod
  labels:
    app: voice-agents-platform
    component: nginx
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: voice-agents-platform
      component: nginx
      environment: production
  template:
    metadata:
      labels:
        app: voice-agents-platform
        component: nginx
        environment: production
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: voice-agents-platform
                    component: nginx
                topologyKey: kubernetes.io/hostname
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: tls-certs
              mountPath: /etc/nginx/ssl
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 101
            runAsGroup: 101
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: tls-certs
          secret:
            secretName: tls-certificates